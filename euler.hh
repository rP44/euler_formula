#pragma once
#ifndef EULER_HH
#define EULER_HH

#include <vector>
#include <mutex>
#include <boost/multiprecision/cpp_int.hpp>

using LongNumber = boost::multiprecision::cpp_int;

/// Класс отвечает на вопрос:
/// "Сколько сеществует способов разбить n-угоульник на треугольники
/// с помощью непересекающихся диагоналей?"
/// 1-ый элемент( n == 3 ): 1 способ
/// 2-ой элемент( n == 4 ): 2 способа
/// 3-ий элемент( n == 5 ): 5 способов
/// Расчет производится по формуле Эйлера.
class Euler final
{
public:
  Euler();

  /// Возвращает n-ый член последовательности
  LongNumber get_member( size_t number_of_member,
                         size_t number_of_function );

  /// Однопоточная. Каждый элемент кэша умножается на противоположный
  /// ему елемент. Следующий элемент последовательности равен сумме
  /// всех таких произведений.
  LongNumber get_member1( size_t number_of_member );

  /// Однопоточная(оптимизарованная). Перемножаются не все элементы кэша, а
  /// только половина из них, затем сумма таких произведений просто умножается на 2
  /// Если количество элементо в кэше - нечетное, то средний элемент кэша
  /// возводится в квадрат и прибавляется к общей сумме произведений.
  LongNumber get_member2( size_t number_of_member );

  /// Многопоточная реализация "get_member2".
  /// Перемножение членов последовательности производится в несколько потоков.
  LongNumber get_member3( size_t number_of_member );

private:
  class Multiplyer;                 ///< функтор, вычисляющий сумму произведений подинтервала
  std::vector< LongNumber > cache_; ///< кеширование ранее вычисленых членов
  LongNumber sum_;                  ///< общая для всех потоков сумма произведений
};

#endif
